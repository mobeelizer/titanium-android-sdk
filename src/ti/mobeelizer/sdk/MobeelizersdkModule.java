/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.mobeelizer.sdk;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;

import com.mobeelizer.java.api.MobeelizerOperationError;
import com.mobeelizer.mobile.android.MobeelizerApplication;
import com.mobeelizer.mobile.android.MobeelizerFileImpl;
import com.mobeelizer.mobile.android.api.MobeelizerOperationCallback;
import com.mobeelizer.mobile.android.api.MobeelizerSyncListener;
import com.mobeelizer.mobile.android.api.MobeelizerSyncStatus;

@Kroll.module(name = "Mobeelizersdk", id = "ti.mobeelizer.sdk")
public class MobeelizersdkModule extends KrollModule {

    @Kroll.constant
    public static final String LOGIN_OK = "OK";

    @Kroll.constant
    public static final String LOGIN_AUTHENTICATION_FAILURE = "AUTHENTICATION_FAILURE";

    @Kroll.constant
    public static final String LOGIN_OTHER_FAILURE = "OTHER_FAILURE";

    @Kroll.constant
    public static final String LOGIN_CONNECTION_FAILURE = "CONNECTION_FAILURE";

    @Kroll.constant
    public static final String LOGIN_MISSING_CONNECTION_FAILURE = "MISSING_CONNECTION_FAILURE";

    @Kroll.constant
    public static final String SYNC_NONE = "NONE";

    @Kroll.constant
    public static final String SYNC_STARTED = "STARTED";

    @Kroll.constant
    public static final String SYNC_FILE_CREATED = "FILE_CREATED";

    @Kroll.constant
    public static final String SYNC_TASK_CREATED = "TASK_CREATED";

    @Kroll.constant
    public static final String SYNC_TASK_PERFORMED = "TASK_PERFORMED";

    @Kroll.constant
    public static final String SYNC_FILE_RECEIVED = "FILE_RECEIVED";

    @Kroll.constant
    public static final String SYNC_FINISHED_WITH_SUCCESS = "FINISHED_WITH_SUCCESS";

    @Kroll.constant
    public static final String SYNC_FINISHED_WITH_FAILURE = "FINISHED_WITH_FAILURE";

    @Kroll.constant
    public static final String COMMUNICATION_SUCCESS = "SUCCESS";

    @Kroll.constant
    public static final String COMMUNICATION_FAILURE = "FAILURE";

    private static MobeelizerApplication mobeelizerApp;

    @Kroll.onAppCreate
    public static void onAppCreate(final TiApplication app) {
        MobeelizerApplication.createApplicationForTitanium(app);
        mobeelizerApp = MobeelizerApplication.createApplicationForTitanium(app);
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy loginToInstanceAndWait(final String instance, final String login, final String password) {
        return convertOperationError(mobeelizerApp.login(instance, login, password));
    }

    @Kroll.method
    public void loginToInstance(final String instance, final String login, final String password,
            final KrollFunction successFunction, final KrollFunction failureFunction) {
        mobeelizerApp.login(instance, login, password, ctreateMobeelizerOperationCallback(successFunction, failureFunction));
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy loginAndWait(final String login, final String password) {
        return convertOperationError(mobeelizerApp.login(login, password));
    }

    @Kroll.method
    public void login(final String login, final String password, final KrollFunction successFunction,
            final KrollFunction failureFunction) {
        mobeelizerApp.login(login, password, ctreateMobeelizerOperationCallback(successFunction, failureFunction));
    }

    @Kroll.method
    public void logout() {
        mobeelizerApp.logout();
    }

    @Kroll.method
    public boolean isLoggedIn() {
        return mobeelizerApp.isLoggedIn();
    }

    @Kroll.method
    public MobeelizerDatabaseProxy getDatabase() {
        return new MobeelizerDatabaseProxy(mobeelizerApp.getDatabase());
    }

    @Kroll.method
    public void sync(final KrollFunction successFunction, final KrollFunction failureFunction) {
        mobeelizerApp.sync(ctreateMobeelizerOperationCallback(successFunction, failureFunction));
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy syncAndWait() {
        return convertOperationError(mobeelizerApp.sync());
    }

    @Kroll.method
    public void syncAll(final KrollFunction successFunction, final KrollFunction failureFunction) {
        mobeelizerApp.syncAll(ctreateMobeelizerOperationCallback(successFunction, failureFunction));
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy syncAllAndWait() {
        return convertOperationError(mobeelizerApp.syncAll());
    }

    @Kroll.method
    public void registerSyncStatusListener(final KrollFunction listenerFunction) {
        mobeelizerApp.registerSyncListener(ctreateMobeelizerSyncListener(listenerFunction));
    }

    @Kroll.method
    public String checkSyncStatus() {
        return mobeelizerApp.checkSyncStatus().toString();
    }

    @Kroll.method
    public MobeelizerFileProxy createFile(final String name, final TiBlob stream) {
        return new MobeelizerFileProxy(new MobeelizerFileImpl(name, stream.getInputStream()));
    }

    @Kroll.method
    public MobeelizerFileProxy getExistingFile(final String name, final String guid) {
        return new MobeelizerFileProxy(new MobeelizerFileImpl(name, guid));
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy registerForRemoteNotifications(final String registrationId) {
        return convertOperationError(mobeelizerApp.registerForRemoteNotifications(registrationId));
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy unregisterForRemoteNotifications() {
        return convertOperationError(mobeelizerApp.unregisterForRemoteNotifications());
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy sendRemoteNotification(final KrollDict notification) {
        return performSendRemoteNotification(null, null, null, notification);
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy sendRemoteNotificationToDevice(final KrollDict notification, final String device) {
        return performSendRemoteNotification(device, null, null, notification);
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy sendRemoteNotificationToUsers(final KrollDict notification, final String[] users) {
        return performSendRemoteNotification(null, null, users, notification);
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy sendRemoteNotificationToUsersOnDevice(final KrollDict notification,
            final String[] users, final String device) {
        return performSendRemoteNotification(device, null, users, notification);
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy sendRemoteNotificationToGroup(final KrollDict notification, final String group) {
        return performSendRemoteNotification(null, group, null, notification);
    }

    @Kroll.method
    public MobeelizerOperationErrorProxy sendRemoteNotificationToGroupOnDevice(final KrollDict notification, final String group,
            final String device) {
        return performSendRemoteNotification(device, group, null, notification);
    }

    private MobeelizerOperationErrorProxy performSendRemoteNotification(final String device, final String group,
            final String[] users, final KrollDict notification) {
        Map<String, String> notificationContent = new HashMap<String, String>();
        for (Entry<String, Object> notifiationElement : notification.entrySet()) {
            notificationContent.put(notifiationElement.getKey(), notifiationElement.getValue().toString());
        }
        List<String> usersList = null;
        if (users != null) {
            usersList = Arrays.asList(users);
        }
        return convertOperationError(mobeelizerApp.sendRemoteNotification(device, group, usersList, notificationContent));
    }

    private MobeelizerOperationErrorProxy convertOperationError(final MobeelizerOperationError error) {
        if (error == null) {
            return null;
        } else {
            return new MobeelizerOperationErrorProxy(error);
        }
    }

    private MobeelizerOperationCallback ctreateMobeelizerOperationCallback(final KrollFunction successFunction,
            final KrollFunction failureFunction) {
        return new MobeelizerOperationCallback() {

            @Override
            public void onSuccess() {
                if (successFunction == null) {
                    return;
                }
                HashMap<String, Object> args = new HashMap<String, Object>();
                successFunction.call(getKrollObject(), args);
            }

            @Override
            public void onFailure(final MobeelizerOperationError error) {
                if (failureFunction == null) {
                    return;
                }
                HashMap<String, Object> args = new HashMap<String, Object>();
                args.put("code", error.getCode());
                args.put("message", error.getMessage());
                String[] arguments = new String[error.getArguments().size()];
                for (int i = 0; i < arguments.length; i++) {
                    arguments[i] = error.getArguments().get(i).toString();
                }
                args.put("arguments", arguments);
                failureFunction.call(getKrollObject(), args);
            }
        };
    }

    private MobeelizerSyncListener ctreateMobeelizerSyncListener(final KrollFunction callbackFunction) {
        return new MobeelizerSyncListener() {

            @Override
            public void onSyncStatusChange(final MobeelizerSyncStatus status) {
                HashMap<String, Object> args = new HashMap<String, Object>();
                args.put("status", status.toString());
                callbackFunction.call(getKrollObject(), args);
            }

        };
    }

}
